type Classification {
  finishStatus: FinishStatus!
  position: Int!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type Event {
  championshipOrder: Int!
  date: DateTime!
  entries: [EventEntry!]!
  id: ID!
  league: League!
  name: String!
  pointsRule(sessionType: SessionType!): PointsRule!
  sessions: [Session!]!
  track: Track!
}

type EventEntry {
  id: ID!
  team: Team!
  user: User!
}

enum FinishStatus {
  DNF
  DNS
  DSQ
  FINISHED
}

type Lap {
  lapNumber: Int!
  lapType: LapType!
  laptimeInMs: Laptime!
  tyres: Tyre!
  valid: Boolean!
}

enum LapType {
  HOT
  IN
  OUT
}

scalar Laptime

type League {
  event(championshipOrder: Int!): Event!
  events: [Event!]!
  id: ID!
  name: String!
  status: LeagueStatus!
  wdcLeaderboard: [WdcLeaderboardEntry!]!
}

enum LeagueStatus {
  ACTIVE
  FINISHED
}

type Overtake {
  id: ID!
  lap: Int!
  overtakenDriver: User!
  overtakingDriver: User!
}

type PointsRule {
  pointsForFastestLap: Int!
  pointsPerPosition: [Int!]!
}

type Query {
  league(id: ID!): League!
  leagues: [League!]!
  session(sessionId: ID!): Session!
  user(id: ID!): User!
}

type Session {
  event: Event!
  fastestLap: User!
  id: ID!
  participants: [SessionParticipant!]!
  sessionType: SessionType!
}

type SessionParticipant {
  classification: Classification!
  entry: EventEntry!
  entryId: ID!
  fastestLap: Lap
  laps: [Lap!]!
  overtakes: [Overtake!]!
  points: Int!
  session: Session!
}

enum SessionType {
  PRACTICE
  QUALIFYING
  RACE
  SPRINT
  SPRINT_QUALIFYING
}

type Team {
  id: ID!
  name: String!
}

type Track {
  country: String!
  id: ID!
  name: String!
}

enum Tyre {
  HARD
  INTER
  MEDIUM
  SOFT
  WET
}

type User {
  id: ID!
  name: String!
  nationality: String!
}

type WdcLeaderboardEntry {
  points: Int!
  team: Team!
  user: User!
}
